import torch
from typing import Dict, List, Any, Union, Tuple

import pickle

from pathlib import Path

from lightning import LightningDataModule
from datasets import Audio, load_dataset
from torch.utils.data import DataLoader
from torch.nn.utils.rnn import pad_sequence

from lightning.pytorch.utilities import CombinedLoader


class SPKVLightningDataModule(LightningDataModule):

    def __init__(
        self,
        pklfile_path: str,
        sample_rate: int = 16000,
        dataset_name: str = "Cnam-LMSSC/vibravox",
        subset: str = "speech_clean",
        sensor_a: str = "airborne.mouth_headworn.reference_microphone",
        sensor_b: str = "airborne.mouth_headworn.reference_microphone",
        split: str = "test",
        streaming: bool = False,
        batch_size: int = 1,
        num_workers: int = 4,
    ):
        """
        LightningDataModule for Speaker Verification (SPKV)

        Args:
            pklfile_path (str, optional): Pickle file path.
            sample_rate (int, optional): Sample rate at which the dataset is output. Defaults to 16000.
            dataset_name (str, optional): Dataset name. Defaults to "Cnam-LMSSC/vibravox"
            subset (str, optional): Subset. Defaults to "speech_clean"
            sensor_a (str, optional): Sensor. Defaults to "airborne.mouth_headworn.reference_microphone"
            sensor_b (str, optional): Sensor. Defaults to "airborne.mouth_headworn.reference_microphone"
            split (str, optional) : Split. Defaults to "test".
            streaming (bool, optional): If True, the audio files are dynamically downloaded. Defaults to False.
            batch_size (int, optional): Batch size. Defaults to 1 since ECAPA2 pretrained model only supports this Batchsize
            num_workers (int, optional): Number of workers. Defaults to 4.
        """
        super().__init__()

        self.sample_rate = sample_rate
        assert dataset_name in ["Cnam-LMSSC/vibravox", "Cnam-LMSSC/vibravox_enhanced_by_EBEN_tmp"], \
            "dataset_name must be 'Cnam-LMSSC/vibravox' or 'Cnam-LMSSC/vibravox_enhanced_by_EBEN_tmp'"
        self.dataset_name = dataset_name
        self.subset = subset
        self.sensorA = sensor_a
        self.sensorB = sensor_b

        self.split = split
        self.pklfile_path = pklfile_path

        if streaming:
            raise AttributeError("Streaming is not supported for SPKVLightningDataModule")
            # because IterableDataset does not support the sort method

        self.streaming = streaming
        self.batch_size = batch_size
        self.num_workers = num_workers

    def setup(self, stage=None):
        """
        Set up the datasets.

        Args:
            stage (str): Pipeline stage among ['fit', 'validate', 'test', 'predict']. Defaults to None.

        Notes:
            This function runs on every accelerator in distributed mode.
            That is why it is necessary to define attributes here rather than in __init__.
        """

        print("Loading the dataset ...")
        dataset_dict = load_dataset(
            self.dataset_name, self.subset, split=self.split, streaming=self.streaming
        )

        print("Ordering by speaker_id ...")
        # Order by speaker_id for easier pairing of audios :
        dataset_dict = dataset_dict.sort("speaker_id")

        print("Selecting columns for dataset_dict_a ... ")

        # Only keep the relevant columns for this task :
        dataset_dict_a = dataset_dict.select_columns([f"audio.{self.sensorA}","speaker_id", "sentence_id", "gender"])
        dataset_dict_b = dataset_dict.select_columns([f"audio.{self.sensorB}","speaker_id", "sentence_id", "gender"])

        print("Resampling the audios to the right sample rate ...")

        # Resample the audios to the right sample rate
        dataset_dict_a = dataset_dict_a.cast_column(
            f"audio.{self.sensorA}", Audio(sampling_rate=self.sample_rate, mono=False)
        )

        dataset_dict_b = dataset_dict_b.cast_column(
            f"audio.{self.sensorB}", Audio(sampling_rate=self.sample_rate, mono=False)
        )

        # Load the pickle file located in pkfile_path generated by scripts/gen_pairs_for_spkv.py :

        with open(Path(__file__).parent.parent.parent / self.pklfile_path, 'rb') as file:
            pairs = pickle.load(file)

        print("Selecting the audios for the test dataset A and B  ...")
        dataset_dict_a = dataset_dict_a.select([pair[0] for pair in pairs])
        dataset_dict_b = dataset_dict_b.select([pair[1] for pair in pairs])

        # Renaming columns to match the format expected by the model :

        dataset_dict_a = dataset_dict_a.rename_column(f"audio.{self.sensorA}", "audio")
        dataset_dict_b = dataset_dict_b.rename_column(f"audio.{self.sensorB}", "audio")


        # Setting format to torch :

        dataset_dict_a = dataset_dict_a.with_format("torch")
        dataset_dict_b = dataset_dict_b.with_format("torch")

        self.test_dataset_a = dataset_dict_a
        self.test_dataset_b = dataset_dict_b

    def train_dataloader(self):
        """
        Train dataloader. Since SPKV does not have a training set, we return an empty dataloader.

        Returns:
            Nothing
        """

        pass

    def val_dataloader(self):
        """
        Validation dataloader. Since SPKV does not have a validation set, we return an empty dataloader.

        Returns:
            Nothing
        """

        pass

    def test_dataloader(self):
        """
        Test dataloader.

        Returns:
            Collection of two DataLoaders corresponding to dataset_A and dataset_B
        """

        dataloader_a = DataLoader(self.test_dataset_a,
                                  batch_size=self.batch_size,
                                  num_workers=self.num_workers,
                                  collate_fn=self.data_collator,
                                  shuffle=False)  # We do not shuffle the dataset to keep the order of the pairs

        dataloader_b = DataLoader(self.test_dataset_b,
                                  batch_size=self.batch_size,
                                  num_workers=self.num_workers,
                                  collate_fn=self.data_collator,
                                  shuffle=False)

        return CombinedLoader(iterables={"sensor_a": dataloader_a, "sensor_b": dataloader_b}, mode='min_size')

    def data_collator(self, batch: List[Dict[str, Any]]) -> Dict[str, Union[ torch.Tensor, List[str], List[int],List[str]]]:
        """
            Collates data samples into a single batch

            Note : since SPKV uses a CombinedLoader, this data_collator is used for both DataLoader

            Parameters:
                batch (Dict[str, Any]): List of dictionaries with keys "audio", "speaker_id", "sentence_id", and "gender"

            Returns:
                Dict : A dictionary containing collated data with keys:
                "audio" (torch.Tensor of dimension (batch_size, 1, sample_rate * duration)),
                "speaker_id" (List[str]),
                "sentence_id" (List[int]),
                "gender" (List[str])
            """

        audio_batch = [sample["audio"]["array"] for sample in batch]
        audio_batch = pad_sequence(audio_batch, batch_first=True, padding_value=0.0).unsqueeze(1)
        speaker_id_batch = [sample["speaker_id"] for sample in batch]
        sentence_id_batch = [int(sample["sentence_id"]) for sample in batch]
        gender_batch = [sample["gender"] for sample in batch]

        return {
            "audio": audio_batch,
            "speaker_id": speaker_id_batch,
            "sentence_id": sentence_id_batch,
            "gender": gender_batch,
        }